window.SIDEBAR_ITEMS = {"enum":[["FdbBindingError","This error represent all errors that can be throwed by `db.run`. Layer developers may use the `CustomError`."]],"fn":[["boot","Initialize the FoundationDB Client API, this can only be called once per process."],["default_config_path","Returns the default Fdb cluster configuration file path"]],"mod":[["api","Configuration of foundationDB API and Network"],["directory","Directory provides a tool for managing related subspaces."],["fdb_keys","Definitions of FDBKeys, used in api version 700 and more."],["future","Most functions in the FoundationDB API are asynchronous, meaning that they may return to the caller before actually delivering their Fdbresult."],["mapped_key_values","Definitions of MappedKeyValues, used in api version 710 and more."],["options","Generated configuration types for use with the various `set_option` functions"],["tuple","Implementation of the official tuple layer typecodes"]],"struct":[["Database","Represents a FoundationDB database"],["FdbError","The Standard Error type of FoundationDB"],["KeySelector","A `KeySelector` identifies a particular key in the database."],["RangeOption","`RangeOption` represents a query parameters for range scan query."],["RetryableTransaction","A retryable transaction, generated by Database.run"],["TransactOption","A set of options that controls the behavior of `Database::transact`."],["Transaction","In FoundationDB, a transaction is a mutable snapshot of a database."],["TransactionCancelled","A cancelled transaction"],["TransactionCommitError","A failed to commit transaction."],["TransactionCommitted","A committed transaction."]],"trait":[["DatabaseTransact",""],["TransactError","A trait that must be implemented to use `Database::transact` this application error types."]],"type":[["FdbResult","Alias for `Result<..., FdbError>`"]]};